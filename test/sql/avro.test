# name: test/sql/avro.test
# description: test avro extension
# group: [avro]

require avro

statement ok
PRAGMA enable_verification

# usual suspect, the userdata1 file
query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/userdata1.avro'));
----
registration_dttm	VARCHAR
id	BIGINT
first_name	VARCHAR
last_name	VARCHAR
email	VARCHAR
gender	VARCHAR
ip_address	VARCHAR
cc	BIGINT
country	VARCHAR
birthdate	VARCHAR
salary	DOUBLE
title	VARCHAR
comments	VARCHAR


query I
FROM read_avro('test/userdata1.avro') SELECT COUNT(*)
----
1000

query III
FROM read_avro('test/userdata1.avro') SELECT first_name, cc, salary ORDER BY registration_dttm LIMIT 10;
----
Lillian	201713786459078	282503.77
Chris	5602220700741429	NULL
Nicholas	3575506969751259	192076.79
Johnny	5602239825516409	169429.76
Bruce	NULL	118244.57
Heather	NULL	164117.18
Larry	3531208154739438	139177.38
Roy	3589146577885209	262816.87
James	3589416270039051	211553.57
Sean	NULL	NULL

# usual suspect, the userdata1 file, this time with a filename arg
query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/userdata1.avro', filename=true));
----
registration_dttm	VARCHAR
id	BIGINT
first_name	VARCHAR
last_name	VARCHAR
email	VARCHAR
gender	VARCHAR
ip_address	VARCHAR
cc	BIGINT
country	VARCHAR
birthdate	VARCHAR
salary	DOUBLE
title	VARCHAR
comments	VARCHAR
filename	VARCHAR


query IIII
FROM read_avro('test/userdata1.avro', filename=true) SELECT first_name, cc, salary, filename ORDER BY registration_dttm LIMIT 10;
----
Lillian	201713786459078	282503.77	test/userdata1.avro
Chris	5602220700741429	NULL	test/userdata1.avro
Nicholas	3575506969751259	192076.79	test/userdata1.avro
Johnny	5602239825516409	169429.76	test/userdata1.avro
Bruce	NULL	118244.57	test/userdata1.avro
Heather	NULL	164117.18	test/userdata1.avro
Larry	3531208154739438	139177.38	test/userdata1.avro
Roy	3589146577885209	262816.87	test/userdata1.avro
James	3589416270039051	211553.57	test/userdata1.avro
Sean	NULL	NULL	test/userdata1.avro



# with filename wildcard
query III
FROM read_avro('test/userdata*.avro', filename=true) SELECT filename[6:], count(*), max(salary) GROUP BY filename ORDER BY filename;
----
userdata1.avro	1000	286592.99
userdata2.avro	998	286587.01
userdata3.avro	1000	286735.82
userdata4.avro	1000	286147.64
userdata5.avro	1000	286384.03


query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/users.avro'));
----
name	VARCHAR
favorite_number	INTEGER
favorite_color	VARCHAR

statement error
from read_avro(['test/userdata1.avro', 'test/users.avro'])
----
schema mismatch in glob

# example from readme
query III
FROM read_avro('test/users.avro')
----
Alyssa	256	NULL
Ben	7	red

query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/single-union.avro'));
----
single_union	INTEGER

# example from readme
query I
FROM read_avro('test/single-union.avro')
----
42

query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/null_first.avro'));
----
null_first	INTEGER

# example from readme
query I
FROM read_avro('test/null_first.avro')
----
42
NULL

query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/null_last.avro'));
----
null_last	INTEGER

# example from readme
query I
FROM read_avro('test/null_last.avro')
----
42
NULL

query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/primitive_types.avro'));
----
null	INTEGER
boolean	BOOLEAN
int	INTEGER
long	BIGINT
float	FLOAT
double	DOUBLE
bytes	BLOB
string	VARCHAR

# example from readme
query IIIIIIII
FROM read_avro('test/primitive_types.avro')
----
NULL	0	-2147483648	-9223372036854775808	-3.4028235e+38	-1.7976931348623157e+308	thisisalongblob\x00withnullbytes	🦆🦆🦆🦆🦆🦆
NULL	1	2147483647	9223372036854775807	3.4028235e+38	1.7976931348623157e+308	\x00\x00\x00a	goo



query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/enum.avro'));
----
color	ENUM('UNKNOWN', 'GREEN', 'RED')

query I
FROM read_avro('test/enum.avro')
----
GREEN
GREEN
RED
UNKNOWN
UNKNOWN

query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/fixed.avro'));
----
md5	BLOB

query I
FROM read_avro('test/fixed.avro')
----
47336f3f2497b70ac046cf23298e20a7
a789a15a7ff7db4a0d1b186363ef0771
c9db7c67a6acb5a65c78b19e9e01d7b0
ac441296bcbd44442301204a8f061cf2



query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/string_array.avro'));
----
string_arr	VARCHAR[]

query I
FROM read_avro('test/string_array.avro')
----
[Hello, World]
[this]
[]
[is, cool, array]
[data]


query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/nullable_string_array.avro'));
----
string_arr	VARCHAR[]

query I
FROM read_avro('test/nullable_string_array.avro')
----
[Hello, World]
[this]
[]
NULL
NULL
[is, cool, array]
[data]


query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/nullable_entry_string_array.avro'));
----
string_arr	VARCHAR[]

query I
FROM read_avro('test/nullable_entry_string_array.avro')
----
[Hello, NULL, World]
[this]
[NULL]
[NULL, NULL, NULL]
[]
[NULL, is, cool, NULL, array, NULL]
[data, NULL]


query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/all_nullable_list.avro'));
----
string_arr	VARCHAR[]

query I
FROM read_avro('test/all_nullable_list.avro')
----
[Hello, NULL, World]
[this]
[NULL]
[NULL, NULL, NULL]
[]
NULL
NULL
[NULL, is, cool, NULL, array, NULL]
[data, NULL]


query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/nested_nullable_lists.avro'));
----
nested_ints	INTEGER[][]

query I
FROM read_avro('test/nested_nullable_lists.avro')
----
NULL
[NULL]
[[NULL], [NULL]]
[NULL, NULL]
[[42]]
[[42], [43]]
[[42, 43]]
[[42, 43], NULL, [44, 45]]
[[42, NULL, 43, NULL], NULL, [44, NULL, 45, NULL], NULL, [46]]


query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/long_map.avro'));
----
long_map	MAP(VARCHAR, BIGINT)

query I
FROM read_avro('test/long_map.avro')
----
{one=42}
{two=43}
{three=44}


statement error
from read_avro('does-not-exist.avro')
----
No files found that match the pattern

statement error
from read_avro('CMakeLists.txt')
----
Incorrect Avro container file magic number


statement error
FROM read_avro('test/recursive.avro')
----
Recursive Avro types not supported: LongList

query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/broken_record.avro'));
----
n	INTEGER

query I
FROM read_avro('test/broken_record.avro')
----
NULL
NULL




query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/query_small.avro'));
----
avro_schema	UNION(u0 STRUCT("data" BLOB), u1 STRUCT(fatal BOOLEAN, "name" VARCHAR, description VARCHAR, "position" BIGINT), u2 STRUCT(bytesScanned BIGINT, totalBytes BIGINT), u3 STRUCT(totalBytes BIGINT))

query I
FROM read_avro('test/query_small.avro')
----
{'data': '100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A100,200,300,400\\x0A300,400,500,600\\x0A'}
{'bytesScanned': 1024, 'totalBytes': 1024}
{'totalBytes': 1024}




query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/avro.avro'));
----
visitor	STRUCT(cookie_id VARCHAR, segments STRUCT(id INTEGER, expiration BIGINT)[], edges MAP(VARCHAR, BIGINT), behaviors MAP(VARCHAR, MAP(VARCHAR, INTEGER)), birthdate BIGINT, association_ids MAP(VARCHAR, VARCHAR))
events	STRUCT(cookie_id VARCHAR, tstamp BIGINT, edge VARCHAR, changes UNION(u0 STRUCT(daystamp VARCHAR, context VARCHAR, "type" ENUM('ADX', 'RETARGET'), count INTEGER), u1 STRUCT(operation ENUM('ADD', 'REPLACE', 'UPDATE', 'REMOVE'), association_id VARCHAR, network VARCHAR, segments INTEGER[])))[]


query II
FROM read_avro('test/avro.avro')
----
{'cookie_id': 133263e9e100000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 133263e9e100000, 'tstamp': 1403721385042, 'edge': batchimport, 'changes': {'operation': REMOVE, 'association_id': NULL, 'network': et, 'segments': [49118]}}, {'cookie_id': 133263e9e100000, 'tstamp': 1403721385042, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49117]}}]
{'cookie_id': 134adb391b00000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 134adb391b00000, 'tstamp': 1403721376988, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49118]}}]
{'cookie_id': 1317beb84b00000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 1317beb84b00000, 'tstamp': 1403721380452, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49118]}}]
{'cookie_id': 12b811f59080000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 12b811f59080000, 'tstamp': 1403721375367, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49118]}}]
{'cookie_id': 134338dcf180000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 134338dcf180000, 'tstamp': 1403721380483, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49118]}}]
{'cookie_id': 12aa3637e280000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 12aa3637e280000, 'tstamp': 1403721383922, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49118]}}]
{'cookie_id': 133bc9432a80000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 133bc9432a80000, 'tstamp': 1403721385810, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49118]}}]
{'cookie_id': 134dbec12c80000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 134dbec12c80000, 'tstamp': 1403721376778, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49117]}}]
{'cookie_id': 12bd0b8c6201000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 12bd0b8c6201000, 'tstamp': 1403721384549, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49118]}}]
{'cookie_id': 13114ef2b401000, 'segments': [], 'edges': {}, 'behaviors': {}, 'birthdate': 0, 'association_ids': {}}	[{'cookie_id': 13114ef2b401000, 'tstamp': 1403721375994, 'edge': batchimport, 'changes': {'operation': ADD, 'association_id': NULL, 'network': et, 'segments': [49117]}}]




query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/part-r-00000.avro'));
----
string	VARCHAR
simple_map	MAP(VARCHAR, INTEGER)
complex_map	MAP(VARCHAR, MAP(VARCHAR, VARCHAR))
union_string_null	VARCHAR
union_int_long_null	UNION(u0 INTEGER, u1 BIGINT)
union_float_double	UNION(u0 FLOAT, u1 DOUBLE)
fixed3	BLOB
fixed2	BLOB
enum	ENUM('SPADES', 'HEARTS', 'DIAMONDS', 'CLUBS')
record	STRUCT(value_field VARCHAR)
array_of_boolean	BOOLEAN[]
bytes	BLOB

statement ok
FROM read_avro('test/part-r-00000.avro')

# iceberg yay
query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/4551fe85-feb8-43ec-8408-730e593c8b12-m0.avro'));
----
status	INTEGER
snapshot_id	BIGINT
data_file	STRUCT(file_path VARCHAR, file_format VARCHAR, "partition" INTEGER, record_count BIGINT, file_size_in_bytes BIGINT, block_size_in_bytes BIGINT, file_ordinal INTEGER, sort_columns INTEGER[], column_sizes MAP(INTEGER, BIGINT), value_counts MAP(INTEGER, BIGINT), null_value_counts MAP(INTEGER, BIGINT), lower_bounds MAP(INTEGER, BLOB), upper_bounds MAP(INTEGER, BLOB), key_metadata BLOB, split_offsets BIGINT[])

# usual suspect, the userdata1 file, this time with a wildcard
query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/userdata1*.avro'));
----
registration_dttm	VARCHAR
id	BIGINT
first_name	VARCHAR
last_name	VARCHAR
email	VARCHAR
gender	VARCHAR
ip_address	VARCHAR
cc	BIGINT
country	VARCHAR
birthdate	VARCHAR
salary	DOUBLE
title	VARCHAR
comments	VARCHAR


# union by name
statement error
FROM read_avro('test/union-name-*.avro', filename=true, union_by_name=true) order by one;
----
Not implemented Error: 'union_by_name' not implemented for Avro reader yet


# TODO: add test where schemas can't be combined

# files with different schemas that can be safely combined are okay
query III
select one, two, three FROM read_avro('test/union-name-*.avro', filename=true) order by all;
----
10	2.0	s30
11	2.1	s31
12	2.2	s32
13	2.3	s33
14	2.4	s34
15	2.5	s35



query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/reuse-1.avro'));
----
request_id	VARCHAR
client_version	STRUCT(major INTEGER, minor INTEGER)
server_version	STRUCT(major INTEGER, minor INTEGER)

query III
FROM read_avro('test/reuse-1.avro')
----
hello	{'major': 4, 'minor': 2}	{'major': 8, 'minor': 5}
world	{'major': 5, 'minor': 3}	{'major': 9, 'minor': 6}



query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/reuse-2.avro'));
----
version	STRUCT(major INTEGER, minor INTEGER)
details	STRUCT(release_version STRUCT(major INTEGER, minor INTEGER))

query II
FROM read_avro('test/reuse-2.avro')
----
{'major': 4, 'minor': 2}	{'release_version': {'major': 8, 'minor': 5}}
{'major': 5, 'minor': 3}	{'release_version': {'major': 9, 'minor': 6}}


query II
select column_name, column_type from (DESCRIBE FROM read_avro('test/union.avro'));
----
event	UNION(u0 STRUCT(id VARCHAR, "timestamp" BIGINT, "data" VARCHAR), u1 STRUCT(id VARCHAR, "timestamp" BIGINT, updatedData VARCHAR), u2 STRUCT(id VARCHAR, "timestamp" BIGINT))

query I
FROM read_avro('test/union.avro')
----
{'id': 1, 'timestamp': 1704367260, 'data': New record created}
{'id': 1, 'timestamp': 1704367360, 'updatedData': Record updated}
{'id': 1, 'timestamp': 1704367460}

